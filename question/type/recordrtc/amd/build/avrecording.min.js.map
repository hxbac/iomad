{"version":3,"sources":["../src/avrecording.js"],"names":["questionId","settings","M","util","js_pending","RecordRtcQuestion","js_complete","checkCanWork","navigator","mediaDevices","window","MediaRecorder","location","protocol","host","indexOf","RecorderPromise","cfg","wwwroot","then","recorderModule","Mp3MediaRecorder","workerURL","URL","createObjectURL","Blob","type","timelimit","mediaElement","noMediaPlaceholder","button","filename","owner","questionDiv","recorder","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","secondsRemaining","countdownTicker","addEventListener","e","preventDefault","dataset","state","startRecording","startSaving","stopRecording","uploadMediaToServer","setButtonLabel","fetchRequest","XMLHttpRequest","open","src","responseType","handleRecordingFetched","send","hidePlayerDuringRecording","parentElement","classList","add","remove","textContent","disableAllButtons","getUserMedia","mediaConstraints","handleCaptureStarting","catch","handleCaptureFailed","stream","srcObject","muted","play","controls","disabled","focus","name","worker","Worker","getRecordingOptions","ondataavailable","handleDataAvailable","onstop","handleRecordingHasStopped","start","startCountdownTimer","event","data","size","maxUploadSize","localStorage","getItem","setItem","showAlert","removeItem","push","core_formchangechecker","pathname","endsWith","set_form_changed","stopCountdownTimer","stop","tracks","getTracks","i","length","blob","mimeType","notifyRecordingComplete","error","Log","debug","setPlaceholderMessage","stringName","replace","toLowerCase","enableAllButtons","updateTimerDisplay","setInterval","clearInterval","secs","mins","Math","round","pad","val","valString","target","status","response","formData","FormData","append","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","readyState","loaded","total","langString","a","innerText","get_string","options","audioBitsPerSecond","parseInt","audioBitRate","videoBitsPerSecond","videoBitRate","videoWidth","videoHeight","mimeTypes","isTypeSupported","disableOrEnableButtons","notifyButtonStatesChanged","enabled","querySelectorAll","forEach","AudioSettings","audio","VideoSettings","width","height","video","ideal","document","getElementById","result","querySelector","setSubmitButtonState","thisQuestion","widget","mediaType","maxRecordingDuration","recordingFilename","typeInfo","Recorder","Notification","exception","anyRecorded","submitButton","subject","ModalFactory","create","types","ALERT","title","body","modal","show"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work inspired this.\n *\n * @package   qtype_recordrtc\n * @copyright 2019 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\n\n/**\n * Verify that the question type can work. If not, show a warning.\n *\n * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n */\nfunction checkCanWork() {\n    if (!(navigator.mediaDevices && window.MediaRecorder)) {\n        return 'nowebrtc';\n    }\n\n    if (!(location.protocol === 'https:' || location.host.indexOf('localhost') !== -1)) {\n        return 'nothttps';\n    }\n\n    return 'ok';\n}\n\nconst RecorderPromise = import(M.cfg.wwwroot + '/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/worker.umd.js').then(() => {\n    return import(M.cfg.wwwroot + '/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/index.umd.js');\n\n}).then(recorderModule => {\n    const Mp3MediaRecorder = recorderModule.Mp3MediaRecorder;\n\n    const workerURL = URL.createObjectURL(new Blob([\n        // Now load the script (UMD version) in the Workers context.\n        \"importScripts('\" + M.cfg.wwwroot + \"/question/type/recordrtc/js/mp3-mediarecorder@4.0.5/worker.umd.js');\",\n\n        // The above index.umd.js script exports all methods in a new mp3EncoderWorker object.\n        \"mp3EncoderWorker.initMp3MediaEncoder({vmsgWasmUrl: '\" +\n        M.cfg.wwwroot + \"/question/type/recordrtc/js/vmsg@0.4.0/vmsg.wasm'});\",\n    ], {type: 'application/javascript'}));\n\n    /**\n     * Object for actually doing the recording.\n     *\n     * The recorder can be in one of 4 states, which is stored in a data-state\n     * attribute on the button. The states are:\n     *  - new:       there is no recording yet. Button shows 'Start recording'.\n     *  - recording: buttons shows a countdown of remaining time. Media is being recorded.\n     *  - saving:    buttons shows a progress indicator.\n     *  - recorded:  button shows 'Record again'.\n     *\n     * @param {(AudioSettings|VideoSettings)} type\n     * @param {int} timelimit\n     * @param {HTMLMediaElement} mediaElement\n     * @param {HTMLMediaElement} noMediaPlaceholder\n     * @param {HTMLButtonElement} button\n     * @param {string} filename the name of the audio or video file\n     * @param {Object} owner\n     * @param {Object} settings\n     * @param {Object} questionDiv\n     * @constructor\n     */\n    function Recorder(type, timelimit, mediaElement, noMediaPlaceholder,\n                      button, filename, owner, settings, questionDiv) {\n        /**\n         * @type {Recorder} reference to this recorder, for use in event handlers.\n         */\n        var recorder = this;\n\n        /**\n         * @type {MediaStream} during recording, the stream of incoming media.\n         */\n        var mediaStream = null;\n\n        /**\n         * @type {MediaRecorder} the recorder that is capturing stream.\n         */\n        var mediaRecorder = null;\n\n        /**\n         * @type {Blob[]} the chunks of data that have been captured so far duing the current recording.\n         */\n        var chunks = [];\n\n        /**\n         * @type {number} number of bytes recorded so far, so we can auto-stop\n         * before hitting Moodle's file-size limit.\n         */\n        var bytesRecordedSoFar = 0;\n\n        /**\n         * @type {number} time left in seconds, so we can auto-stop at the time limit.\n         */\n        var secondsRemaining = 0;\n\n        /**\n         * @type {number} intervalID returned by setInterval() while the timer is running.\n         */\n        var countdownTicker = 0;\n\n        button.addEventListener('click', handleButtonClick);\n        this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n        /**\n         * Handles clicks on the start/stop button.\n         *\n         * @param {Event} e\n         */\n        function handleButtonClick(e) {\n            e.preventDefault();\n            switch (button.dataset.state) {\n                case 'new':\n                case 'recorded':\n                    startRecording();\n                    break;\n                case 'starting':\n                    startSaving();\n                    break;\n                case 'recording':\n                    stopRecording();\n                    break;\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked).\n         */\n        function startRecording() {\n\n            if (type.hidePlayerDuringRecording) {\n                mediaElement.parentElement.classList.add('hide');\n                noMediaPlaceholder.classList.remove('hide');\n                noMediaPlaceholder.textContent = '\\u00a0';\n            } else {\n                mediaElement.parentElement.classList.remove('hide');\n                noMediaPlaceholder.classList.add('hide');\n            }\n\n            // Change look of recording button.\n            button.classList.remove('btn-outline-danger');\n            button.classList.add('btn-danger');\n\n            // Disable other question buttons when current widget stared recording.\n            disableAllButtons();\n\n            // Empty the array containing the previously recorded chunks.\n            chunks = [];\n            bytesRecordedSoFar = 0;\n            navigator.mediaDevices.getUserMedia(type.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        }\n\n        /**\n         * Callback once getUserMedia has permission from the user to access the recording devices.\n         *\n         * @param {MediaStream} stream the stream to record.\n         */\n        function handleCaptureStarting(stream) {\n            mediaStream = stream;\n\n            // Setup the UI for during recording.\n            mediaElement.srcObject = stream;\n            mediaElement.muted = true;\n            if (type.hidePlayerDuringRecording) {\n                startSaving();\n            } else {\n                mediaElement.play();\n                mediaElement.controls = false;\n\n                button.dataset.state = 'starting';\n                setButtonLabel('startrecording');\n            }\n\n            // Make button clickable again, to allow starting/stopping recording.\n            button.disabled = false;\n            button.focus();\n        }\n\n        /**\n         * For recording types which show the media during recording,\n         * this starts the loop-back display, but does not start recording it yet.\n         */\n        function startSaving() {\n            // Initialize MediaRecorder events and start recording.\n            if (type.name === 'audio') {\n                mediaRecorder = new Mp3MediaRecorder(mediaStream,\n                    {worker: new Worker(workerURL)});\n            } else {\n                mediaRecorder = new MediaRecorder(mediaStream,\n                    getRecordingOptions());\n            }\n\n            mediaRecorder.ondataavailable = handleDataAvailable;\n            mediaRecorder.onstop = handleRecordingHasStopped;\n            mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n            button.dataset.state = 'recording';\n            startCountdownTimer();\n        }\n\n        /**\n         * Callback that is called by the media system for each Chunk of data.\n         *\n         * @param {BlobEvent} event\n         */\n        function handleDataAvailable(event) {\n\n            // Check there is space to store the next chunk, and if not stop.\n            bytesRecordedSoFar += event.data.size;\n            if (settings.maxUploadSize >= 0 && bytesRecordedSoFar >= settings.maxUploadSize) {\n\n                // Extra check to avoid alerting twice.\n                if (!localStorage.getItem('alerted')) {\n                    localStorage.setItem('alerted', 'true');\n                    stopRecording();\n                    owner.showAlert('nearingmaxsize');\n\n                } else {\n                    localStorage.removeItem('alerted');\n                }\n            }\n\n            // Store the next chunk of data.\n            chunks.push(event.data);\n\n            // Notify form-change-checker that there is now unsaved data.\n            // But, don't do this in question preview where it is just annoying.\n            if (typeof M.core_formchangechecker !== 'undefined' &&\n                !window.location.pathname.endsWith('/question/preview.php')) {\n                M.core_formchangechecker.set_form_changed();\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked or because we have reached a limit).\n         */\n        function stopRecording() {\n            // Disable the button while things change.\n            button.disabled = true;\n\n            // Stop the count-down timer.\n            stopCountdownTimer();\n\n            // Update the button.\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n\n            // Ask the recording to stop.\n            mediaRecorder.stop();\n\n            // Also stop each individual MediaTrack.\n            var tracks = mediaStream.getTracks();\n            for (var i = 0; i < tracks.length; i++) {\n                tracks[i].stop();\n            }\n        }\n\n        /**\n         * Callback that is called by the media system once recording has finished.\n         */\n        function handleRecordingHasStopped() {\n            if (button.dataset.state === 'new') {\n                // This can happens if an error occurs when recording is starting. Do nothing.\n                return;\n            }\n\n            // Set source of audio player.\n            var blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n            mediaElement.srcObject = null;\n            mediaElement.src = URL.createObjectURL(blob);\n\n            // Show audio player with controls enabled, and unmute.\n            mediaElement.muted = false;\n            mediaElement.controls = true;\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n            mediaElement.focus();\n\n            // Encure the button while things change.\n            button.disabled = true;\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'recorded';\n\n            if (chunks.length > 0) {\n                owner.notifyRecordingComplete(recorder);\n            }\n        }\n\n        /**\n         * Function that handles errors from the recorder.\n         *\n         * @param {DOMException} error\n         */\n        function handleCaptureFailed(error) {\n            Log.debug('Audio/video question: error received');\n            Log.debug(error);\n\n            setPlaceholderMessage('recordingfailed');\n            setButtonLabel('recordagain');\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'new';\n\n            if (mediaRecorder) {\n                mediaRecorder.stop();\n            }\n\n            // Changes 'CertainError' -> 'gumcertain' to match language string names.\n            var stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n            owner.showAlert(stringName);\n            enableAllButtons();\n        }\n\n        /**\n         * Start the countdown timer from timeLimit.\n         */\n        function startCountdownTimer() {\n            secondsRemaining = timelimit;\n\n            updateTimerDisplay();\n            countdownTicker = setInterval(updateTimerDisplay, 1000);\n        }\n\n        /**\n         * Stop the countdown timer.\n         */\n        function stopCountdownTimer() {\n            if (countdownTicker !== 0) {\n                clearInterval(countdownTicker);\n                countdownTicker = 0;\n            }\n        }\n\n        /**\n         * Update the countdown timer, and stop recording if we have reached 0.\n         */\n        function updateTimerDisplay() {\n            var secs = secondsRemaining % 60;\n            var mins = Math.round((secondsRemaining - secs) / 60);\n            setButtonLabel('recordinginprogress', pad(mins) + ':' + pad(secs));\n\n            if (secondsRemaining === -1) {\n                stopRecording();\n            }\n            secondsRemaining -= 1;\n        }\n\n        /**\n         * Zero-pad a string to be at least two characters long.\n         *\n         * Used fro\n         * @param {number} val, e.g. 1 or 10\n         * @return {string} e.g. '01' or '10'.\n         */\n        function pad(val) {\n            var valString = val + '';\n\n            if (valString.length < 2) {\n                return '0' + valString;\n            } else {\n                return valString;\n            }\n        }\n\n        /**\n         * Upload the recorded media back to Moodle.\n         */\n        function uploadMediaToServer() {\n            setButtonLabel('uploadpreparing');\n\n            var fetchRequest = new XMLHttpRequest();\n\n            // Get media of audio/video tag.\n            fetchRequest.open('GET', mediaElement.src);\n            fetchRequest.responseType = 'blob';\n            fetchRequest.addEventListener('load', handleRecordingFetched);\n            fetchRequest.send();\n        }\n\n        /**\n         * Callback called once we have the data from the media element.\n         *\n         * @param {ProgressEvent} e\n         */\n        function handleRecordingFetched(e) {\n            var fetchRequest = e.target;\n            if (fetchRequest.status !== 200) {\n                // No data.\n                return;\n            }\n\n            // Blob is now the media that the audio/video tag's src pointed to.\n            var blob = fetchRequest.response;\n\n            // Create FormData to send to PHP filepicker-upload script.\n            var formData = new FormData();\n            formData.append('repo_upload_file', blob, filename);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('repo_id', settings.uploadRepositoryId);\n            formData.append('itemid', settings.draftItemId);\n            formData.append('savepath', '/');\n            formData.append('ctx_id', settings.contextId);\n            formData.append('overwrite', 1);\n\n            var uploadRequest = new XMLHttpRequest();\n            uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n            uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n            uploadRequest.addEventListener('error', handleUploadError);\n            uploadRequest.addEventListener('abort', handleUploadAbort);\n            uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n            uploadRequest.send(formData);\n        }\n\n        /**\n         * Callback for when the upload completes.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadReadyStateChanged(e) {\n            var uploadRequest = e.target;\n            if (uploadRequest.readyState === 4 && uploadRequest.status === 200) {\n                // When request finished and successful.\n                setButtonLabel('recordagain');\n                enableAllButtons();\n            } else if (uploadRequest.status === 404) {\n                setPlaceholderMessage('uploadfailed404');\n                enableAllButtons();\n            }\n        }\n\n        /**\n         * Callback for updating the upload progress.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadProgress(e) {\n            setButtonLabel('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadError() {\n            setPlaceholderMessage('uploadfailed');\n            enableAllButtons();\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadAbort() {\n            setPlaceholderMessage('uploadaborted');\n            enableAllButtons();\n        }\n\n        /**\n         * Display a progress message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {Object|String} a optional variable to populate placeholder with\n         */\n        function setButtonLabel(langString, a) {\n            button.innerText = M.util.get_string(langString, 'qtype_recordrtc', a);\n        }\n\n        /**\n         * Display a message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {Object|String} a optional variable to populate placeholder with\n         */\n        function setPlaceholderMessage(langString, a) {\n            noMediaPlaceholder.textContent = M.util.get_string(langString, 'qtype_recordrtc', a);\n            mediaElement.parentElement.classList.add('hide');\n            noMediaPlaceholder.classList.remove('hide');\n        }\n\n        /**\n         * Select best options for the recording codec.\n         *\n         * @returns {Object}\n         */\n        function getRecordingOptions() {\n            var options = {};\n\n            // Get the relevant bit rates from settings.\n            if (type.name === 'audio') {\n                options.audioBitsPerSecond = parseInt(settings.audioBitRate, 10);\n            } else if (type.name === 'video') {\n                options.videoBitsPerSecond = parseInt(settings.videoBitRate, 10);\n                options.videoWidth = parseInt(settings.videoWidth, 10);\n                options.videoHeight = parseInt(settings.videoHeight, 10);\n\n                // Go through our list of mimeTypes, and take the first one that will work.\n                for (var i = 0; i < type.mimeTypes.length; i++) {\n                    if (MediaRecorder.isTypeSupported(type.mimeTypes[i])) {\n                        options.mimeType = type.mimeTypes[i];\n                        break;\n                    }\n                }\n            }\n\n            return options;\n        }\n\n        /**\n         * Enable all buttons in the question.\n         */\n        function enableAllButtons() {\n            disableOrEnableButtons(true);\n            owner.notifyButtonStatesChanged();\n        }\n\n        /**\n         * Disable all buttons in the question.\n         */\n        function disableAllButtons() {\n            disableOrEnableButtons(false);\n        }\n\n        /**\n         * Disables/enables other question buttons when current widget started recording/finished recording.\n         *\n         * @param {boolean} enabled true if the button should be enabled.\n         */\n        function disableOrEnableButtons(enabled = false) {\n            questionDiv.querySelectorAll('button, input[type=submit], input[type=button]').forEach(\n                function(button) {\n                    button.disabled = !enabled;\n                }\n            );\n        }\n    }\n\n    return Recorder;\n});\n\n/**\n * Object that controls the settings for recording audio.\n *\n * @constructor\n */\nfunction AudioSettings() {\n    this.name = 'audio';\n    this.hidePlayerDuringRecording = true;\n    this.mediaConstraints = {\n        audio: true\n    };\n    this.mimeTypes = [\n        'audio/mpeg',\n    ];\n}\n\n/**\n * Object that controls the settings for recording video.\n *\n * @param {number} width desired width.\n * @param {number} height desired height.\n * @constructor\n */\nfunction VideoSettings(width, height) {\n    this.name = 'video';\n    this.hidePlayerDuringRecording = false;\n    this.mediaConstraints = {\n        audio: true,\n        video: {\n            width: {ideal: width},\n            height: {ideal: height}\n        }\n    };\n    this.mimeTypes = [\n        'video/webm;codecs=vp9,opus',\n        'video/webm;codecs=h264,opus',\n        'video/webm;codecs=vp8,opus'\n    ];\n}\n\n/**\n * Represents one record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n * @constructor\n */\nfunction RecordRtcQuestion(questionId, settings) {\n    var questionDiv = document.getElementById(questionId);\n\n    // Check if the RTC API can work here.\n    var result = checkCanWork();\n    if (result === 'nothttps') {\n        questionDiv.querySelector('.https-warning').classList.remove('hide');\n        return;\n    } else if (result === 'nowebrtc') {\n        questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n        return;\n    }\n\n    // Make the callback functions available.\n    this.showAlert = showAlert;\n    this.notifyRecordingComplete = notifyRecordingComplete;\n    this.notifyButtonStatesChanged = setSubmitButtonState;\n    const thisQuestion = this;\n\n    // We may have more than one widget in a question.\n    questionDiv.querySelectorAll('.audio-widget, .video-widget').forEach(function(widget) {\n        // Get the key UI elements.\n        var type = widget.dataset.mediaType;\n        var timelimit = widget.dataset.maxRecordingDuration;\n        var button = widget.querySelector('.record-button button');\n        var mediaElement = widget.querySelector('.media-player ' + type);\n        var noMediaPlaceholder = widget.querySelector('.no-recording-placeholder');\n        var filename = widget.dataset.recordingFilename;\n\n        // Get the appropriate options.\n        var typeInfo;\n        if (type === 'audio') {\n            typeInfo = new AudioSettings();\n        } else {\n            typeInfo = new VideoSettings(settings.videoWidth, settings.videoHeight);\n        }\n\n        // Create the recorder.\n        RecorderPromise.then(Recorder => {\n            new Recorder(typeInfo, timelimit, mediaElement, noMediaPlaceholder, button,\n                filename, thisQuestion, settings, questionDiv);\n            return 'Why should I have to return anything here?';\n        }).catch(Notification.exception);\n    });\n    setSubmitButtonState();\n\n    /**\n     * Set the state of the question's submit button.\n     *\n     * If any recorder does not yet have a recording, then disable the button.\n     * Otherwise, enable it.\n     */\n    function setSubmitButtonState() {\n        var anyRecorded = false;\n        questionDiv.querySelectorAll('.audio-widget, .video-widget').forEach(function(widget) {\n            if (widget.querySelector('.record-button button').dataset.state === 'recorded') {\n                anyRecorded = true;\n            }\n        });\n        var submitButton = questionDiv.querySelector('input.submit[type=submit]');\n        if (submitButton) {\n            submitButton.disabled = !anyRecorded;\n       }\n    }\n\n    /**\n     * Show a modal alert.\n     *\n     * @param {string} subject Subject is the content of the alert (which error the alert is for).\n     * @return {Promise}\n     */\n    function showAlert(subject) {\n        return ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n            body: M.util.get_string(subject, 'qtype_recordrtc'),\n        }).then(function(modal) {\n            modal.show();\n            return modal;\n        });\n    }\n\n    /**\n     * Callback called when the recording is completed.\n     *\n     * @param {Recorder} recorder the recorder.\n     */\n    function notifyRecordingComplete(recorder) {\n        recorder.uploadMediaToServer();\n    }\n}\n\n/**\n * Initialise a record audio or video question.\n *\n * @param {string} questionId id of the outer question div.\n * @param {Object} settings like audio bit rate.\n */\nfunction init(questionId, settings) {\n    M.util.js_pending('init-' + questionId);\n    new RecordRtcQuestion(questionId, settings);\n    M.util.js_complete('init-' + questionId);\n}\n\nexport {\n    init\n};\n"],"file":"avrecording.min.js"}